---
title: "[Notes] Linkedin Learning: Git"
author: "Aidan Leib"
format: pdf
toc: true

---

# Working with git

## Version Control

* Allows you to track changes
* project history
* backup and restore

### Collaboration

* allows devs to share code
* can track who did what and when

### Centralized Version control

* storage of files and logs in a centralized server
* retrieval from server
* E.x: Apache sub version or SVN

### Distributed Version COntrol

* Cloning code on own machine
* local version = "working copy"
* push/pull copies to main repo

## WHat is git?

* version control (like a time machine except you can change history)
* check points are like commits
* You can branch which is like multiverses without affecting the original history
* Merging branches or synchronizing the code

## Git environments

* HEAD always points to the current reality/branch

### 3 places to move files

* Working -- files look like what they did in previous commit
* Staging -- a way to queue up changes before committing (`add`)
* Committing -- once moved using this, a new log entry is created

### File states

* tracked -- anyhting staged that is different than last commit
* untracked files -- anything else

### tracked files

* unmodified
* modified
* staged -- moved into staging environment

### Restoring files

Used to discard any 'staged' changes of files

* `git restore <filename>` -- restore a file
* `git restore .` -- restore entire directory

## Differences

* `git diff`

> `git log --oneline` for viewing a cleaner log

## changing history

### amending

Instead of adding a new commit to fix something in a previous commit, you can use the `--amend` flag

* `git commit --amend -m "new commit message" -- to update new commit message
* `git commit --amend --no-edit" -- to keep old commit message

### resetting

* `git reset [hash]` -- unstages the changes after the reset. moves HEAD back to another commit
* doesn't delte the files, but does rewind the commits

> `git reset --hard ae75ce0` -- does delete any commits before 'ae75ce0' and modifies the files

### rebasing

One way to move changes from one branch to another.

* `git rebase <branch>/<commit>`
* `git rebase --interactive <branch>/<commit>` -- easiest/safeset way to rebase
* `git rebase -i HEAD~#` -- moves back to a certain number of commits
* `git rebase -i --root`

## Branches

### copying a branch

* `git switch -c NAME` -- copies the current branch into new branch NAME

### merging

* `git merge <branch>` -- merges changes from `<branch>` into current branch

### deleting branch

* `git branch --delete NAME`
* `git branch -d NAME` -- as long as branches are free of conflicts
* `git branch -D NAME` -- ignores conflicts and just deletes branch

::: {.callout-note}
## Git Flow

* create a branch for a feature/fix
* make changes on that branch
* merge branch into `main`
* delete the old branch
:::